{"version":3,"sources":["src/index.ts"],"names":[],"mappings":"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","file":"src/index.js","sourcesContent":["/*\n\n\nTODO LIST\n--------------------\nto next major version \n1. remove Listen and call this.listen in NetOrganelleSap action\n2.\n\n\n*/\n\n\n\n\"use strict\";\nimport * as http from \"http\";\nimport * as euglena_template from \"@euglena/template\";\nimport * as euglena from \"@euglena/core\";\nimport { sys, js } from \"cessnalib\";\nimport Particle = euglena.ParticleV1;\nimport * as io from \"socket.io\";\nimport Exception = sys.type.Exception;\n\nexport namespace particles {\n    export namespace incoming {\n        export class EnableUpload extends euglena_template.VoidParticle {      \n            public static readonly NAME = \"EnableUpload\";      \n            constructor(of:string){\n                super(new euglena.MetaV2(EnableUpload.NAME,of));\n            }\n\n            c(){\n                particles.incoming.EnableUpload.NAME;\n            }\n        }\n    }\n    export namespace outgoing {\n\n    }\n    export namespace shared {\n\n    }\n}\n\nlet this_: Organelle = null;\nexport class Organelle extends euglena_template.alive.organelle.NetOrganelle {\n    private sockets: any;\n    private servers: any;\n    private httpConnector: HttpRequestManager;\n    constructor() {\n        super();\n        this_ = this;\n        this.sockets = {};\n        this.servers = {};\n    }\n\n    private sapContent: euglena_template.alive.particle.NetOrganelleSapContent;\n    protected bindActions(addAction: (particleName: string, action: (particle: Particle, callback: (particle: Particle) => void) => void) => void): void {\n        addAction(euglena_template.alive.constants.particles.NetOrganelleSap, (particle) => {\n            this.sapContent = particle.data;\n        });\n        addAction(euglena_template.alive.constants.particles.Listen, particle => {\n            this.listen();\n        });\n        addAction(euglena_template.alive.constants.particles.ThrowImpact, particle => {\n            let throwImpactContent = particle.data as euglena_template.alive.particle.ThrowImpactContent;\n            this.throwImpact(throwImpactContent.to, throwImpactContent.impact);\n        });\n        addAction(euglena_template.alive.constants.particles.ConnectToEuglena, particle => {\n            this.connectToEuglena(particle.data);\n        });\n    }\n\n    private connectToEuglena(euglenaInfo: euglena_template.alive.particle.EuglenaInfo) {\n        if (this.servers[euglenaInfo.data.name]) {\n            return;\n        }\n        var post_options: http.RequestOptions;\n        post_options.host = euglenaInfo.data.url;\n        post_options.port = Number(euglenaInfo.data.port);\n        post_options.path = \"/\";\n        post_options.method = 'POST';\n        post_options.headers = {\n            'Content-Type': 'application/json'\n        };\n        let server = io(\"http://\" + post_options.host + \":\" + post_options.port);\n        this.servers[euglenaInfo.data.name] = server;\n        server.on(\"connect\", (socket: SocketIO.Socket) => {\n            server.emit(\"bind\", this_.sapContent.euglenaInfo, (done: boolean) => {\n                if (done) {\n                    this_.send(new euglena_template.alive.particle.ConnectedToEuglena(euglenaInfo, this_.name));\n                }\n            });\n            server.on(\"impact\", (_impactAssumption: any, callback: (impact: euglena.interaction.Impact) => void) => {\n                let impactAssumption = js.Class.clone(_impactAssumption, true);\n                this.send(impactAssumption);\n            });\n        });\n        server.on(\"disconnect\", () => {\n            this_.send(new euglena_template.alive.particle.DisconnectedFromEuglena(euglenaInfo, this_.name));\n        });\n    }\n    private listen(): void {\n        let server = http.createServer((req, res) => {\n            if (req.method == 'POST') {\n                var body = '';\n                req.on('data', (data: string) => {\n                    body += data;\n                    // Too much POST data, kill the connection!\n                    if (body.length > 1e6)\n                        req.socket.destroy();\n                });\n                req.on('end', () => {\n                    res.writeHead(200, { 'Content-Type': 'application/json' });\n                    let impactAssumption: any = null;\n                    let result = { result: \"Internal Server Error!\" }\n                    try {\n                        impactAssumption = JSON.parse(body);\n                        result = { result: \"ok\" };\n                    } catch (e) {\n                        //TODO\n                        result = { result: \"Request format is uncorrect !\" };\n                        impactAssumption = null;\n                    }\n                    if (impactAssumption) {\n                        if (req.url === '/sync') {\n                            this.send(impactAssumption, (p) => res.end(JSON.stringify(p)));\n                        } else {\n                            res.end(JSON.stringify(result));\n                            this.send(impactAssumption);\n                        }\n                    } else {\n                        result = { result: \"Request format is uncorrect !\" };\n                        res.end(JSON.stringify(result));\n                    }\n                });\n            } else if (req.method == 'GET') {\n                let retrieveApi = new euglena_template.alive.particle.ReadParticle({ meta: { name: euglena_template.alive.constants.particles.Api, of: this.sapContent.euglenaName } }, this.sapContent.euglenaName);\n                res.writeHead(200, { 'Content-Type': 'text/plain' });\n                this.send(retrieveApi, (p) => res.end(JSON.stringify(p)));\n            }\n\n        });\n        let socket = io.listen(server);\n        server.listen(this.sapContent.euglenaInfo.data.port);\n        socket.on(\"connection\", (socket: any) => {\n            socket.on(\"bind\", (_euglenaInfo: euglena_template.alive.particle.EuglenaInfo, callback: any) => {\n                callback(true);\n                let euglenaInfo = js.Class.clone(_euglenaInfo, true);\n                this.sockets[euglenaInfo.data.name] = socket;\n                this_.send(new euglena_template.alive.particle.ConnectedToEuglena(euglenaInfo, this_.name));\n                this_.send(euglenaInfo);\n            });\n            socket.on(\"impact\", (impactAssumption: euglena.interaction.Impact) => {\n                let copy = js.Class.clone(impactAssumption, true);\n                this_.send(impactAssumption);\n            });\n        });\n        this.send(new euglena_template.alive.particle.ServerRunning(this.sapContent.euglenaInfo.data.port, this.sapContent.euglenaName));\n    }\n    private throwImpact(to: euglena_template.alive.particle.EuglenaInfo, impact: euglena.interaction.Impact): void {\n        var client = this.sockets[to.data.name];\n        if (client) {\n            client.emit(\"impact\", impact, (resp: euglena.interaction.Impact) => {\n                //TODO\n            });\n        } else {\n            //TODO\n            //response(new euglena_template.alive.particles.ExceptionOccurred(\n            //  new euglena.sys.type.Exception(\"There is no gateway connected with that id: \" + userId)));\n            let server = this.servers[to.data.name];\n            if (server) {\n                server.emit(\"impact\", impact);\n            } else {\n                //TODO\n                var post_options = {\n                    host: to.data.url,\n                    port: Number(to.data.port),\n                    path: \"/\",\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                };\n                let httpConnector = new HttpRequestManager(post_options);\n                httpConnector.sendMessage(JSON.stringify(impact), (message: any) => {\n                    if (sys.type.StaticTools.Exception.isNotException<string>(message)) {\n                        try {\n                            let impactAssumption = JSON.parse(message);\n                            this_.send(impactAssumption);\n                        } catch (e) {\n                            //TODO\n                        }\n                    } else {\n                        //TODO write a eligable exception message\n                        this_.send(new euglena_template.alive.particle.Exception(new Exception(\"\"),this.sapContent.euglenaName));\n                    }\n\n                });\n            }\n        }\n    }\n}\n\nexport class HttpRequestManager {\n    constructor(public post_options: http.RequestOptions) { }\n    public sendMessage(message: string, callback: sys.type.Callback<string>): void {\n        var req = http.request(this.post_options, (res) => {\n            res.setEncoding('utf8');\n            var str = '';\n            res.on('data', (data: string) => {\n                str += data;\n            });\n            res.on('end', (data: string) => {\n                callback(str);\n            });\n        });\n        req.setTimeout(10000, () => {\n            req.abort();\n            callback(new Exception(\"Request timed out.\"));\n        });\n        req.on('error', (e: any) => {\n            callback(new Exception(\"problem with request: \" + e.message));\n        });\n        if (message) req.write(message);\n        req.end();\n    }\n}"],"sourceRoot":"/source/"}